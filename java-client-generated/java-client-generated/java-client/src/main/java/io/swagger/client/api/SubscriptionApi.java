/*
 * Nokia TAS Call Direction API
 * The first version of the Nokia TAS Call Direction API is an exciting step forward towards making it easier for developers to have open access to their operator's network.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: openapi.support@nokia.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CallDirectionSubscriptionResponse1;
import io.swagger.client.model.CallDirectionSubscriptionWrapper1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionApi {
    private ApiClient apiClient;

    public SubscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createSubscription */
    private com.squareup.okhttp.Call createSubscriptionCall(CallDirectionSubscriptionWrapper1 callDirectionSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = callDirectionSubscription;
        
        // create path and map variables
        String localVarPath = "/callnotification/v1/subscriptions/callDirection".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "nokia_mn_api_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSubscriptionValidateBeforeCall(CallDirectionSubscriptionWrapper1 callDirectionSubscription, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'callDirectionSubscription' is set
        if (callDirectionSubscription == null) {
            throw new ApiException("Missing the required parameter 'callDirectionSubscription' when calling createSubscription(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSubscriptionCall(callDirectionSubscription, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a call direction subscription
     * 
     * @param callDirectionSubscription Call direction subscription object that needs to be sent to the Nokia TAS (required)
     * @return CallDirectionSubscriptionResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CallDirectionSubscriptionResponse1 createSubscription(CallDirectionSubscriptionWrapper1 callDirectionSubscription) throws ApiException {
        ApiResponse<CallDirectionSubscriptionResponse1> resp = createSubscriptionWithHttpInfo(callDirectionSubscription);
        return resp.getData();
    }

    /**
     * Create a call direction subscription
     * 
     * @param callDirectionSubscription Call direction subscription object that needs to be sent to the Nokia TAS (required)
     * @return ApiResponse&lt;CallDirectionSubscriptionResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CallDirectionSubscriptionResponse1> createSubscriptionWithHttpInfo(CallDirectionSubscriptionWrapper1 callDirectionSubscription) throws ApiException {
        com.squareup.okhttp.Call call = createSubscriptionValidateBeforeCall(callDirectionSubscription, null, null);
        Type localVarReturnType = new TypeToken<CallDirectionSubscriptionResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a call direction subscription (asynchronously)
     * 
     * @param callDirectionSubscription Call direction subscription object that needs to be sent to the Nokia TAS (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubscriptionAsync(CallDirectionSubscriptionWrapper1 callDirectionSubscription, final ApiCallback<CallDirectionSubscriptionResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubscriptionValidateBeforeCall(callDirectionSubscription, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CallDirectionSubscriptionResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSubscription */
    private com.squareup.okhttp.Call deleteSubscriptionCall(String id, String addr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/callnotification/v1/subscriptions/callDirection/subs".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "Id", id));
        if (addr != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "addr", addr));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "nokia_mn_api_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSubscriptionValidateBeforeCall(String id, String addr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSubscription(Async)");
        }
        
        // verify the required parameter 'addr' is set
        if (addr == null) {
            throw new ApiException("Missing the required parameter 'addr' when calling deleteSubscription(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSubscriptionCall(id, addr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a call direction subscription
     * 
     * @param id Subscription identifier (required)
     * @param addr Subscriber address (SIP address) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSubscription(String id, String addr) throws ApiException {
        deleteSubscriptionWithHttpInfo(id, addr);
    }

    /**
     * Delete a call direction subscription
     * 
     * @param id Subscription identifier (required)
     * @param addr Subscriber address (SIP address) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSubscriptionWithHttpInfo(String id, String addr) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubscriptionValidateBeforeCall(id, addr, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a call direction subscription (asynchronously)
     * 
     * @param id Subscription identifier (required)
     * @param addr Subscriber address (SIP address) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubscriptionAsync(String id, String addr, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubscriptionValidateBeforeCall(id, addr, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getSubscription */
    private com.squareup.okhttp.Call getSubscriptionCall(String id, String addr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/callnotification/v1/subscriptions/callDirection/subs".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "Id", id));
        if (addr != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "addr", addr));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "nokia_mn_api_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubscriptionValidateBeforeCall(String id, String addr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSubscription(Async)");
        }
        
        // verify the required parameter 'addr' is set
        if (addr == null) {
            throw new ApiException("Missing the required parameter 'addr' when calling getSubscription(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSubscriptionCall(id, addr, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read a call direction subscription
     * 
     * @param id Subscription identifier (required)
     * @param addr Subscriber address (SIP address) (required)
     * @return CallDirectionSubscriptionResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CallDirectionSubscriptionResponse1 getSubscription(String id, String addr) throws ApiException {
        ApiResponse<CallDirectionSubscriptionResponse1> resp = getSubscriptionWithHttpInfo(id, addr);
        return resp.getData();
    }

    /**
     * Read a call direction subscription
     * 
     * @param id Subscription identifier (required)
     * @param addr Subscriber address (SIP address) (required)
     * @return ApiResponse&lt;CallDirectionSubscriptionResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CallDirectionSubscriptionResponse1> getSubscriptionWithHttpInfo(String id, String addr) throws ApiException {
        com.squareup.okhttp.Call call = getSubscriptionValidateBeforeCall(id, addr, null, null);
        Type localVarReturnType = new TypeToken<CallDirectionSubscriptionResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read a call direction subscription (asynchronously)
     * 
     * @param id Subscription identifier (required)
     * @param addr Subscriber address (SIP address) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubscriptionAsync(String id, String addr, final ApiCallback<CallDirectionSubscriptionResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubscriptionValidateBeforeCall(id, addr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CallDirectionSubscriptionResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
